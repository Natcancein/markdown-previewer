{"version":3,"sources":["components/Editor.js","components/placeHolderText.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faEdit","Editor","props","react_default","a","createElement","Form_default","id","Group","Label","className","index_es","icon","Control","as","rows","placeholder","value","onChange","placeHolderText","faEye","marked","require","setOptions","breaks","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","markDown","handleChange","bind","assertThisInitialized","event","setState","target","Container_default","Row_default","style","display","alignItems","height","transform","Col_default","components_Editor","dangerouslySetInnerHTML","__html","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAaAA,IAAQC,IAAIC,KAEZ,IAgBeC,EAhBA,SAACC,GAAD,OACXC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,GAAG,UACTJ,EAAAC,EAAAC,cAACC,EAAAF,EAAKI,MAAN,KACAL,EAAAC,EAAAC,cAACC,EAAAF,EAAKK,MAAN,CAAYC,UAAU,WACtBP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAiBC,KAAK,SADtB,WAEAT,EAAAC,EAAAC,cAACC,EAAAF,EAAKS,QAAN,CACAC,GAAG,WAAWC,KAAK,KACnBC,YAAY,6BACZC,MAAOf,EAAMe,MACbC,SAAUhB,EAAMgB,cCoBLC,EA5CM,qlCCcrBrB,IAAQC,IAAIqB,KAGZ,IAAMC,EAASC,EAAQ,IAIvBD,EAAOE,WAAW,CAChBC,QAAQ,QA0DKC,cAtDb,SAAAA,EAAYvB,GAAO,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM3B,KACD+B,MAAQ,CACXC,SAAUf,GAEZO,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KALHA,4EAQNY,GACXT,KAAKU,SAAS,CACZL,SAAUI,EAAME,OAAOvB,yCAIlB,IACCiB,EAAaL,KAAKI,MAAlBC,SAGR,OACE/B,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SACbP,EAAAC,EAAAC,cAACoC,EAAArC,EAAD,KACED,EAAAC,EAAAC,cAAA,MAAIK,UAAU,UAAd,sBAEAP,EAAAC,EAAAC,cAACqC,EAAAtC,EAAD,CACEuC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,OAAQ,OACRC,UAAW,sBAEb5C,EAAAC,EAAAC,cAAC2C,EAAA5C,EAAD,KACED,EAAAC,EAAAC,cAAC4C,EAAD,CAAQhC,MAAOiB,EAAUhB,SAAUW,KAAKM,gBAE1ChC,EAAAC,EAAAC,cAAC2C,EAAA5C,EAAD,KACED,EAAAC,EAAAC,cAAA,MAAIK,UAAU,WACZP,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAiBC,KAAK,SAChB,IAHV,aAMAT,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACbP,EAAAC,EAAAC,cAAA,OAAK6C,wBAAyB,CAAEC,OAAQ9B,EAAOa,SAIrD/B,EAAAC,EAAAC,cAAA,KAAGK,UAAU,SAAS0C,KAAK,iCAA3B,kCA9CQC,aCbEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.da889818.chunk.js","sourcesContent":["import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport '../App.css';\r\n\r\n//Adding font awesome\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\n// Adding Font Awwesome\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nlibrary.add(faEdit);\r\n\r\nconst Editor = (props) => (\r\n    <Form id=\"Editor\">\r\n    <Form.Group >\r\n    <Form.Label className=\"Titulos\" >  \r\n    <FontAwesomeIcon icon=\"edit\" /> Editor</Form.Label>\r\n    <Form.Control \r\n    as=\"textarea\" rows=\"15\"\r\n    placeholder=\"Write whatever you want...\"\r\n    value={props.value}\r\n    onChange={props.onChange} \r\n    >\r\n    </Form.Control>\r\n    </Form.Group>\r\n    </Form>\r\n);\r\n\r\nexport default Editor;","const placeHolderText = \r\n`# Header (H1 size)\r\n## Sub header (H2 size)\r\n### Sub header (H3 size)\r\n  \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n  \r\nText **bold**\r\n_Text italic_.\r\n**_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n        \r\n1. And there are numbererd lists too.\r\n\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`\r\n\r\nexport default placeHolderText;","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Editor from \"./components/Editor\";\r\nimport placeHolderText from \"./components/placeHolderText\";\r\n\r\n// Adding Font Bootstrap-React\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// Adding Font Awwesome\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faEye } from \"@fortawesome/free-solid-svg-icons\";\r\nlibrary.add(faEye);\r\n\r\n// Adding Mark Library\r\nconst marked = require(\"marked\");\r\n\r\n// Set options\r\n// allows <br> with return btn\r\nmarked.setOptions({\r\n  breaks: true\r\n});\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      markDown: placeHolderText\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({\r\n      markDown: event.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { markDown } = this.state;\r\n    //const newText = marked(markDown);\r\n\r\n    return (\r\n      <div className=\"Fondo\">\r\n        <Container>\r\n          <h1 className=\"Titulo\">Markdown Previewer</h1>\r\n\r\n          <Row\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              height: \"80vh\",\r\n              transform: \"translateY(-50px)\"\r\n            }}>\r\n            <Col>\r\n              <Editor value={markDown} onChange={this.handleChange} />\r\n            </Col>\r\n            <Col>\r\n              <h2 className=\"Titulos\">\r\n                <span>\r\n                  <FontAwesomeIcon icon=\"eye\" />\r\n                </span>{\" \"}\r\n                Previewer\r\n              </h2>\r\n              <div className=\"Previewer\">\r\n                <div dangerouslySetInnerHTML={{ __html: marked(markDown) }} />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <a className=\"Footer\" href=\"https://github.com/Natcancein\">\r\n            Created by Natcancein\r\n          </a>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}